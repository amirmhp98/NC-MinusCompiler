PROGRAM -> DECLARATION_LIST $
DECLARATION_LIST -> TEMP_1
TEMP_1 -> DECLARATION TEMP_1 | ϵ
DECLARATION ->  int TEMP_11 | void TEMP_11
TEMP_11 -> id TEMP_13
TEMP_13 -> VAR_DECLARATION | FUN_DECLARATION
VAR_DECLARATION -> ; | [ num ] ;
FUN_DECLARATION -> ( PARAMS ) COMPOUND_STMT
PARAMS -> PARAM_LIST | void TEMP_22
TEMP_22 -> ϵ | TEMP_9 TEMP_2
PARAM_LIST -> PARAM TEMP_2
TEMP_2 -> , TEMP_21 | ϵ
TEMP_21 -> PARAM TEMP_2 | void TEMP_9 TEMP_2
PARAM -> int TEMP_9
TEMP_9 -> id TEMP_14
TEMP_14 -> ϵ | [ ]
COMPOUND_STMT -> { DECLARATION_LIST STATMENT_LIST }
STATMENT_LIST -> TEMP_3
TEMP_3 -> STATEMENT TEMP_3 | ϵ
STATEMENT -> EXPRESSION_STMT | COMPOUND_STMT | SELECTION_STMT | ITERATION_STMT | RETURN_STMT | SWITCH_STMT
EXPRESSION_STMT -> EXPRESSION  ; | continue ; | break ; | ;
SELECTION_STMT -> if ( EXPRESSION ) STATEMENT else STATEMENT
ITERATION_STMT -> while ( EXPRESSION ) STATEMENT
RETURN_STMT -> return ; | return EXPRESSION ;
SWITCH_STMT -> switch ( EXPRESSION ) { CASE_STMTS DEFAULT_STMT }
CASE_STMTS -> TEMP_4
TEMP_4 -> CASE_STMT TEMP_4 | ϵ
CASE_STMT -> case num : STATMENT_LIST
DEFAULT_STMT -> default : STATMENT_LIST | ϵ
EXPRESSION -> id TEMP_16 | SIMPLE_EXPRESSION
TEMP_16 -> VAR TEMP_17 | CALL TEMP_6 TEMP_5 TEMP_10
TEMP_17 -> = EXPRESSION | TEMP_6 TEMP_5 TEMP_10
VAR -> ϵ | [ EXPRESSION ]
SIMPLE_EXPRESSION -> ADDITIVE_EXPRESSION TEMP_10
TEMP_10 -> RELOP TEMP_19 | ϵ
TEMP_19 -> ADDITIVE_EXPRESSION | id TEMP_15  TEMP_6 TEMP_5
RELOP -> < | ==
ADDITIVE_EXPRESSION -> TERM TEMP_5
TEMP_5 -> ADDOP TEMP_18 | ϵ
TEMP_18 -> TERM TEMP_5 | id TEMP_15  TEMP_6 TEMP_5
ADDOP -> + | -
TERM -> SIGNED_FACTOR TEMP_6
TEMP_6 -> * TEMP_20 | ϵ
TEMP_20 -> SIGNED_FACTOR TEMP_6 | id TEMP_15 TEMP_6
SIGNED_FACTOR -> FACTOR | + FACTOR | - FACTOR | + id TEMP_15 | - id TEMP_15
FACTOR -> ( EXPRESSION ) |  num
TEMP_15 -> VAR | CALL
CALL -> ( ARGS )
ARGS -> ARG_LIST | ϵ
ARG_LIST -> EXPRESSION TEMP_7
TEMP_7 -> , EXPRESSION TEMP_7 | ϵ

